name: Continuous Delivery

on:
  release:
    types: [ published ]

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: payment-service/api
  SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}

jobs:

  vars:
    runs-on: ubuntu-latest
    outputs:
      repository_name: ${{ steps.repository.outputs.name }}
      sha_short: ${{ steps.sha.outputs.short }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      -
        name: Set repository vars
        id: repository
        run: echo "name=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> "$GITHUB_OUTPUT"
      -
        name: Set sha vars
        id: sha
        run: echo "short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      -
        name: Set release version
        id: release
        run: echo "tag=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"

  build:
    needs: [ vars ]
    runs-on: ubuntu-latest
    outputs:
      image: aptive/${{ needs.vars.outputs.repository_name }}:sha-${{ needs.vars.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: aptive/${{ needs.vars.outputs.repository_name }}
          tags: |
            type=schedule
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=aptive/${{ needs.vars.outputs.repository_name }}:buildcache
          cache-to: type=registry,ref=aptive/${{ needs.vars.outputs.repository_name }}:buildcache,mode=max
          secrets: |
            composer_auth=${{ secrets.COMPOSER_AUTH }}
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aptive/${{ needs.vars.outputs.repository_name }}

  deploy:
    needs: [ vars, build ]
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.payment-service.prd.goaptive.com
    concurrency:
      group: ${{ github.workflow }}-production-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - uses: syntaqx/setup-kustomize@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      -
        name: Tag and push Docker Image to ECR
        id: ecr
        run: |
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.vars.outputs.tag }}"
          docker pull ${{ needs.build.outputs.image }}
          docker tag ${{ needs.build.outputs.image }} $ECR_IMAGE
          docker push $ECR_IMAGE
          echo "image=$ECR_IMAGE" >> "$GITHUB_OUTPUT"
      -
        run: |
          echo "${{ steps.ecr.outputs.image }} is pending deploy to production"
          echo "Currently managed by ArgoCD"

  pulumi-deploy:
    needs: [ vars, deploy ]
    name: Pulumi Deploy
    environment: production
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./pulumi
    steps:
      - uses: actions/checkout@v4
      -
        name: Install pulumi
        uses: pulumi/actions@v5
      -
        name: Setup Node LTS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          cache-dependency-path: ./pulumi
      -
        name: Install dependencies
        run: npm install
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.PULUMI_AWS_ROLE }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      -
        name: Setup kubectl
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ${HOME}/.kube/config
      -
        name: Deploy
        env:
            PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
            IMAGE_TAG: ${{ needs.vars.outputs.tag }}
        run: |
          pulumi stack select aptive/apps-payment-service-api/${{ vars.PULUMI_STACK }}
          pulumi config rm aws:profile
          pulumi up --yes

  post-technical-kpis-team-channel:
    needs: [ vars ]
    runs-on: ubuntu-latest
    environment: technical-kpis # Use a GitHub environment to introduce a delay on the job. Currently, the delay is set to 15 minutes.
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Post Technical KPIs
        uses: aptive-env/action-post-technical-kpis@v0
        with:
          slack-channel: crm_beta
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          github-repository: payment-service
          github-release-tag: ${{ needs.vars.outputs.tag }}
          datadog-api-key: ${{ secrets.DATADOG_API_KEY }}
          datadog-app-key: ${{ secrets.DATADOG_APP_KEY }}
          datadog-service: payment-service

  # TODO: remove this job once the action is updated to support multiple channels
  post-technical-kpis-general-channel:
    needs: [ vars ]
    runs-on: ubuntu-latest
    environment: technical-kpis # Use a GitHub environment to introduce a delay on the job. Currently, the delay is set to 15 minutes.
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Post Technical KPIs
        uses: aptive-env/action-post-technical-kpis@v0
        with:
          slack-channel: app_release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          github-repository: payment-service
          github-release-tag: ${{ needs.vars.outputs.tag }}
          datadog-api-key: ${{ secrets.DATADOG_API_KEY }}
          datadog-app-key: ${{ secrets.DATADOG_APP_KEY }}
          datadog-service: payment-service
